apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-job-placesdb
spec:
  template:
    metadata:
      name:  postgres-init-placesdb
      labels:
        app: init-postgresdb
    spec:
      containers:
        - image: postgres:12.10
          name: postgres-initdb
          command: [ "bin/sh", "-c", "PGPASSWORD=$DATABASE_PASSWORD psql -U $DATABASE_USER -d parkingdb -h postgres-service -a -f /app/migration/sqlCommand.sql" ]
          volumeMounts:
            - name: sql-command
              mountPath: "/app/migration"
          env:
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
      volumes:
        - name: sql-command
          configMap:
            name: sql-command
      restartPolicy: Never
---
apiVersion: v1
data:
  sqlCommand.sql: "create table if not exists parking_status (id bigint PRIMARY KEY GENERATED BY DEFAULT
    AS IDENTITY,\r\n    status varchar(50) not null);
    \r\n    create table if not exists parking_place (id bigint PRIMARY KEY GENERATED BY DEFAULT 
    AS IDENTITY,\r\n    place varchar(50),\r\n    status_id bigint REFERENCES parking_status (id));
    \r\n    insert into parking_status(id, status) values (0, 'FREE');\r\n    insert into parking_status(id, status) 
    values (1, 'BOOKING');\r\n    insert into parking_status(id, status) values (2, 'PARKING');
    \r\n    insert into parking_place(id, place, status_id) values (0, 'A1', 0);\r\n    insert into parking_place
    (id, place, status_id) values (1, 'A2', 0);\r\n    insert into parking_place(id, place, status_id)
    values (2, 'Parking1', 0);\r\n    insert into parking_place(id, place, status_id) values (3, 'Parking2', 0);"
kind: ConfigMap
metadata:
  name: sql-command